{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Def function": {
    "prefix": "def",
    "body": [
      "def ${1:name}(${2:args}):",
      "  $0"
    ],
    "description": "Add a breakpoint in the sourcecode"
  },

  "Debug - add breakpoint": {
    "prefix": "d",
    "body": [
      "import pdb; pdb.set_trace()",
      "$1"
    ],
    "description": "Add a breakpoint in the sourcecode"
  },

  "Interactive cell adornment": {
    "prefix": "c",
    "body": [
      "# %%",
      "$1"
    ],
    "description": "creates an interactive cell (jupyter)"
  },

  "Auto reload header": {
    "prefix": "r",
    "body": [
      "# %%",
      "%reload_ext autoreload",
      "%autoreload 2",
      "$1"
    ],
    "description": "adds an interactive cell that emsures external code files are reloaded on each change"
  },

  "Plot timeseries linechart": {
    "prefix": "l",
    "body": [
      "# %%",
      "import matplotlib.pyplot as plt",
      "## For inline... you need the below:",
      "%matplotlib inline",
      "import seaborn as sns",
      "xs = range(4)",
      "ys = [123, 210, 240, 258]",
      "sns.lineplot(x=xs, y=ys)",
      "## For non-inline... you need to explicitly call plt.show:",
      "plt.show()",
      "$1"
    ],
    "description": "adds an interactive cell that emsures external code files are reloaded on each change"
  },

  "readlines simple": {
    "prefix": "readlines simple",
    "body": [
      "with open('${1:filename}') as fp:",
      "    lines = fp.read().splitlines()",
      "$0"
    ],
    "description": "read lines from a file - simple!"
  },

  "Pandas read csv": {
    "prefix": "pandas read csv",
    "body": [
      "# use header=None not to read a header, then can can pass names=[...] to set the column names",
      "df = pd.read_csv('${1:path/to/file}', delimiter=',', skipinitialspace=True, index_col=False)",
      "$0"
    ],
    "description": "read lines from a file - simple!"
  },



  "mysql query": {
    "prefix": "MySQL query",
    "body": [
      "## pip install mysql-connector-python",
      "from mysql.connector import connect",
      "",
      "# Import config file, or just inline here:",
      "# from config import HOST, PORT, USER, PASS, DB",
      "HOST = 'marvin-db.prod.aistemos.com'",
      "#HOST = 'zaphod-db.prod.aistemos.com'",
      "PORT = '3306'",
      "USER = 'xxxxxxxxxxxxxxxxxxxx'",
      "PASS = 'xxxxxxxxxxxxxxxxxxxx'",
      "DB   = 'xxxxxxxxxxxxxxxxxxxx'",
      "",
      "LIMIT = 10",
      "",
      "LIMIT_CLAUSE = f'LIMIT {LIMIT}' if LIMIT else ''",
      "",
      "QUERY = f'''",
      "SELECT pat_fam_id, status, title, abstract, claims from PatentFamily",
      "{LIMIT_CLAUSE}",
      "'''",
      "",
      "conn = connect(",
      "  host=HOST,",
      "  user=USER,",
      "  password=PASS,",
      "  db=DB",
      ")",
      "cursor = conn.cursor()",
      "",
      "cursor.execute(QUERY)",
      "results = cursor.fetchall()",
      "for result in results:",
      "    print(result)",
      "",
      "# alterntively can import into a dataframe",
      "import pandas as pd",
      "df = pd.read_sql(QUERY, conn)",
      "pd.set_option('display.expand_frame_repr', False)",
      "",
      "$0"
    ],
    "description": "Creates a MySQL connection, and executes a query"
  },



  
  // TkInter stuff (maybe delete?) /////////////////////////////////////////////
  
  "Tkinter App": {
    "prefix": "app",
    "body": [
      "from tkinter import *",
      "",
      "class App(Tk):",
      "",
      "    def __init__(self):",
      "        Tk.__init__(self)",
      "        self.geometry('500x400+150+90')",
      "",
      "        label = Label(self, text='hello world', font=('Arial', 40))",
      "        label.pack(pady=10)",
      "",
      "app = App()",
      "app.mainloop()",
      "$1"
    ],
    "description": "Tkinter hello-world App"
  },

  "Tkinter Simple App": {
    "prefix": "simple",
    "body": [
      "from tkinter import *",
      "",
      "window = Tk()",
      "window.geometry('500x400+150+90')",
      "",
      "label = Label(window, text='hello world', font=('Arial', 40))",
      "label.pack()",
      "",
      "window.mainloop()",
      "$1"
    ],
    "description": "Tkinter simple hello-world App"
  },

  "Tkinter label": {
    "prefix": "label",
    "body": [
      "label = Label(${1:parent}, text='${2:text}', font=('Arial', 16))",
      "label.pack(pady=10)",
      "$0"
    ],
    "description": "Tkinter Label"
  },

  "Tkinter buttton": {
    "prefix": "button",
    "body": [
      "button = Button(${1:parent}, relief=FLAT, text='${2:text}', command=lambda: print('hello world'))",
      "button.pack(side=TOP, padx=2, pady=2)",
      "$0"
    ],
    "description": "Tkinter button"
  },

  "Tkinter frame subclass": {
    "prefix": "frame subclass",
    "body": [
      "class ${1:name}(Frame):",
      "    def __init__(self, parent):",
      "        Frame.__init__(self, parent)",
      "        label = Label(self, text='${1}', font=('Arial', 20))",
      "        label.pack(pady=10)",
      "",
      "# Then within some other frame or Tk object)...",
      "instance = ${1}(parent)",
      "instance.pack()",
      "",
      "# To bring to the forgeground:",
      "instance.lift()",
    ],
    "description": "Tkinter frame subclass"
  },

  "Tkinter frame": {
    "prefix": "frame",
    "body": [
      "frame = Frame(${1:parent}, bd=10, bg='blue')",
      "",
      "# Layout - either pack, or place (takes up whole screen)",
      "#frame.pack(side=TOP, fill=BOTH, expand=True)",
      "#frame.place(in_=parent, x=0, y=20, relwidth=1, relheight=1)"
    ],
    "description": "Tkinter frame"
  },

}