{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Interactive cell adornment": {
    "prefix": "c",
    "body": [
      "# %%",
      "$1"
    ],
    "description": "creates an interactive cell (jupyter)"
  },

  "Auto reload header": {
    "prefix": "r",
    "body": [
      "# %%",
      "%reload_ext autoreload",
      "%autoreload 2",
      "$1"
    ],
    "description": "adds an interactive cell that emsures external code files are reloaded on each change"
  },

  "Plot timeseries linechart": {
    "prefix": "l",
    "body": [
      "# %%",
      "import matplotlib.pyplot as plt",
      "%matplotlib inline",
      "import seaborn as sns",
      "xs = range(4)",
      "ys = [123, 210, 240, 258]",
      "sns.lineplot(x=xs, y=ys)",
      "$1"
    ],
    "description": "adds an interactive cell that emsures external code files are reloaded on each change"
  },

  "Tkinter App": {
    "prefix": "app",
    "body": [
      "from tkinter import *",
      "",
      "class App(Tk):",
      "",
      "    def __init__(self):",
      "        Tk.__init__(self)",
      "        self.geometry('500x400+150+90')",
      "",
      "        label = Label(self, text='hello world', font=('Arial', 40))",
      "        label.pack(pady=10)",
      "",
      "app = App()",
      "app.mainloop()",
      "$1"
    ],
    "description": "Tkinter hello-world App"
  },

  "Tkinter Simple App": {
    "prefix": "simple",
    "body": [
      "from tkinter import *",
      "",
      "window = Tk()",
      "window.geometry('500x400+150+90')",
      "",
      "label = Label(window, text='hello world', font=('Arial', 40))",
      "label.pack()",
      "",
      "window.mainloop()",
      "$1"
    ],
    "description": "Tkinter simple hello-world App"
  },

  "Tkinter label": {
    "prefix": "label",
    "body": [
      "label = Label(${1:parent}, text='${2:text}', font=('Arial', 16))",
      "label.pack(pady=10)",
      "$0"
    ],
    "description": "Tkinter Label"
  },

  "Tkinter buttton": {
    "prefix": "button",
    "body": [
      "button = Button(${1:parent}, relief=FLAT, text='${2:text}', command=lambda: print('hello world'))",
      "button.pack(side=TOP, padx=2, pady=2)",
      "$0"
    ],
    "description": "Tkinter button"
  },

  "Tkinter frame subclass": {
    "prefix": "frame subclass",
    "body": [
      "class ${1:name}(Frame):",
      "    def __init__(self, parent):",
      "        Frame.__init__(self, parent)",
      "        label = Label(self, text='${1}', font=('Arial', 20))",
      "        label.pack(pady=10)",
      "",
      "# Then within some other frame or Tk object)...",
      "instance = ${1}(parent)",
      "instance.pack()",
      "",
      "# To bring to the forgeground:",
      "instance.lift()",
    ],
    "description": "Tkinter frame subclass"
  },

  "Tkinter frame": {
    "prefix": "frame",
    "body": [
      "frame = Frame(${1:parent}, bd=10, bg='blue')",
      "",
      "# Layout - either pack, or place (takes up whole screen)",
      "#frame.pack(side=TOP, fill=BOTH, expand=True)",
      "#frame.place(in_=parent, x=0, y=20, relwidth=1, relheight=1)"
    ],
    "description": "Tkinter frame"
  },

}